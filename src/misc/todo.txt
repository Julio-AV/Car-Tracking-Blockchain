Connection handler:
    - Test one to n script with more nodes
    - Fix auto connection <-- Not needed, but it would be nice fixing it
    - Add timeout for hosts that don't exist  

- Implementing the blockchain <-- Previous step
- Complete data_handler <-- Current step
- Complete simulations 

Blockchain:
    Complete transaction validation
    Complete block validation


Data handler:
    Once you receive a block, keep in mind it will have to be broadcasted, 
        which will be done by a thread that's communicated with the data handler by a queue,
        so, the data handler will put a transaction/block on the queue if he hasn't stored it yet, which means that if 
        the transaction or block is already stored, it means that is was received previously, which means that it should not be
        broadcasted.
        
    Keep in mind that we need to differentiate block receiving with transaction receiving. 

    Validate signature, but first you need to create the keys

Connection_handler:
    - Add queue to transfer broadcasting data from data_handler

Node: 
    - Keep in mind that when a block is broadcasted, transaction_list is flushed (or not, we'll see), but if it is flushed, we need 
        to check on node whether a transaction was on the blockchain or not
Simulations:
    Create key handler
    Create blockchain key management 
    Adapt and test current simulations with blockchain implemented simulation
    Create semi-connected scenario
    Create realistic scenario simulation

Refactoring: 
    - Rename TransactionFactory to BlockchainFactory


Possible errors and debugging:
    Add python output redirecting on docker machines to keep record of traces
    Possible error decoding digital sign after sending through sockets
