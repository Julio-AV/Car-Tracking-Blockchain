#!/usr/bin/env python3
from subprocess import run
import argparse


def create_network(starting_ip, network_name):
    splitted_IP = starting_ip.split(".")
    splitted_IP[-1] = "0"
    subnet = ".".join(splitted_IP)
    command = ["docker", "network" , "create"
                f"--subnet={subnet}" , network_name]
    try:
        command_output = run(command)
        if command_output == 0:
            print(f"A new network has been created at: {subnet} with name {network_name}")
        else:
            print(f"A new network couln't be created --> {command_output.stderr}")
    except Exception as e:
        print(f"A new network couln't be created ---> {e}")

def run_container(name: str, real_port: int, VM_port: int, ip: str, network: str, image_name: str):
    command = [
    "docker", "run",
    "--name", name,         # Container name
    "-p", f"{real_port}:{VM_port}",         # Port mapping
    "--ip", ip,     # IP
    "--network", network,  # Docker nework
    image_name          # Container image
    ]
    run(command)

# name = "server"
# real_port = 5000
# VM_port = 5000
# ip = "192.168.1.99"
# network = "blockchain_network"
# image_name = "imagen_juju"
# run_container(name, real_port, VM_port, ip, network, image_name)
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Script to launch docker machines to the blockchain")
    parser.add_argument("-n", "--name", type=str, help="Container's name", default="autogenerated_container")
    parser.add_argument("-p", "--startingPort", type=int, help="The starting port from which containers will be deployed", default=5000)
    parser.add_argument("-i", "--startingIP", type= str, help="The starting IP from which containers will be deployed", default="192.168.1.1")
    parser.add_argument("--network", type=str, help="Name of the docker network", default="autogenerated_network")
    args = parser.parse_args()
    create_network(args.startingIP, args.network)