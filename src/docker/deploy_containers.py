#!/usr/bin/env python3
import argparse
import ipaddress
import sys
from container import Container
from subprocess import run
import time

def is_valid_IP(ip):
    try:
        # Intentamos crear un objeto IP utilizando la direcci칩n proporcionada
        ipaddress.ip_address(ip)
        return True  # Si no lanza excepci칩n, la IP es v치lida
    except ValueError:
        raise Exception(f"Introduced IP address {ip} is not valid")
    

def create_network(starting_ip, network_name, mask = 24):
    """
    Creates a docker network
    
    Args:
        starting_ip: first container's IP
        network_name: Name of the network
        mask: subnet mask
    """
    splitted_IP = starting_ip.split(".")
    splitted_IP[-1] = "0"
    subnet = ".".join(splitted_IP)
    command = ["docker", "network" , "create",
                f"--subnet={subnet}/{mask}" , network_name]
    command_output = run(command)
    if command_output.returncode == 0:
        print(f"A new network has been created at: {subnet} with name {network_name}")
    else:
        print(f"New network {network_name} couln't be created at {subnet}")      

def handle_args():
    parser = argparse.ArgumentParser(description="Script to launch docker machines to the blockchain")
    parser.add_argument("-n", "--name", type=str, help="Container's name", default="autogenerated_container")
    parser.add_argument("-p", "--startingPort", type=int, help="The starting port from which containers will be deployed", default=5500)
    parser.add_argument("-i", "--startingIP", type= str, help="The starting IP from which containers will be deployed", default="192.168.2.2")
    parser.add_argument("--network", type=str, help="Name of the docker network", default="autogenerated_network")
    parser.add_argument("-d", "--dockerImage",type=str ,required=True, help="Name of the image to be used")
    args = parser.parse_args()
    return args

# name = "server"
# real_port = 5000
# VM_port = 5000
# ip = "192.168.1.99"
# network = "blockchain_network"
# image_name = "imagen_juju"
# run_container(name, real_port, VM_port, ip, network, image_name)
if __name__ == '__main__':
    args = handle_args()
    container_name = args.name
    starting_port = args.startingPort
    starting_ip = args.startingIP
    network = args.network
    image_name = args.dockerImage
    container = Container(container_name,starting_port, starting_port, starting_ip, network, image_name)

    is_valid_IP(starting_ip)
    create_network(starting_ip, network)
    container.run_container(False)
    print("Corri칩")
    time.sleep(10)
    #container.stop_container()
    container.remove_container()
    